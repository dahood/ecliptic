// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ecliptic.Unit.Test.Gherkin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RetrieveEnterpriseEffectiveInFuture")]
    public partial class RetrieveEnterpriseEffectiveInFutureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RetrieveEnterpriseEffectiveInFuture.xlsx.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RetrieveEnterpriseEffectiveInFuture", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SearchByIdAndGasDay")]
        public virtual void SearchByIdAndGasDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchByIdAndGasDay", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Effective Gas Day",
                        "Termination Gas Day",
                        "Inactive Gas Day",
                        "Mnemonic",
                        "SAP #",
                        "Legal Name",
                        "Extension 1",
                        "Extension 2",
                        "Short Name"});
            table1.AddRow(new string[] {
                        "1999999",
                        "9/1/2014 12:00:00 AM",
                        "12/31/9999 12:00:00 AM",
                        "12/31/9999 12:00:00 AM",
                        "FUTR",
                        "1000001",
                        "New Enterprise with a Future Effective Date",
                        "",
                        "",
                        "New Future Enterprise"});
#line 6
testRunner.Given("Enterprises", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Gas Day"});
            table2.AddRow(new string[] {
                        "1999999",
                        "7/24/2014 12:00:00 AM"});
#line 10
testRunner.When("Search Enterprise using", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Legal Name",
                        "Short Name",
                        "Mnemonic",
                        "SAP #"});
            table3.AddRow(new string[] {
                        "New Enterprise with a Future Effective Date",
                        "New Future Enterprise",
                        "FUTR",
                        "1000001"});
#line 14
testRunner.Then("View Enterprise", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
